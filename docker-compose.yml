# Gaming Player Behavior Analysis & Churn Prediction
# Docker Compose configuration for multi-service orchestration
#
# Author: Rushikesh Dhumal
# Email: r.dhumal@rutgers.edu
#
# Usage:
#   docker-compose up --build              # Build and start all services
#   docker-compose up analysis             # Start only analysis service
#   docker-compose up development          # Start development environment
#   docker-compose down                    # Stop all services

version: '3.8'

services:
  # =============================================================================
  # Main Analysis Service
  # =============================================================================
  analysis:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: gaming-churn-prediction:latest
    container_name: gaming-analysis
    environment:
      - ENVIRONMENT=production
      - PYTHONPATH=/app
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
      - ./reports:/app/reports
      - ./scripts/outputs:/app/scripts/outputs
    networks:
      - gaming-network
    restart: unless-stopped
    command: ["python", "scripts/run_complete_analysis.py", "--environment", "production"]
    healthcheck:
      test: ["CMD", "python", "-c", "import src.utils.config; print('Health OK')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # =============================================================================
  # Development Environment
  # =============================================================================
  development:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    image: gaming-churn-prediction:dev
    container_name: gaming-dev
    environment:
      - ENVIRONMENT=development
      - JUPYTER_ENABLE_LAB=yes
      - PYTHONPATH=/app
    volumes:
      - .:/app
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
    ports:
      - "8888:8888"  # Jupyter notebook
      - "8000:8000"  # API service (if needed)
    networks:
      - gaming-network
    restart: unless-stopped
    command: >
      sh -c "
        echo 'Starting development environment...' &&
        jupyter notebook --ip=0.0.0.0 --port=8888 --no-browser --allow-root
          --NotebookApp.token='' --NotebookApp.password=''
      "

  # =============================================================================
  # Quick Analysis Service
  # =============================================================================
  quick-analysis:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: gaming-churn-prediction:latest
    container_name: gaming-quick
    environment:
      - ENVIRONMENT=development
      - PYTHONPATH=/app
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
      - ./scripts/outputs:/app/scripts/outputs
    networks:
      - gaming-network
    command: ["python", "scripts/run_complete_analysis.py", "--environment", "development", "--quick-run"]
    profiles: ["quick"]  # Only start with --profile quick

  # =============================================================================
  # Database Service (if PostgreSQL is needed)
  # =============================================================================
  database:
    image: postgres:13-alpine
    container_name: gaming-postgres
    environment:
      POSTGRES_DB: gaming_analytics
      POSTGRES_USER: gaming_user
      POSTGRES_PASSWORD: gaming_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - gaming-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gaming_user -d gaming_analytics"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles: ["database"]  # Only start with --profile database

  # =============================================================================
  # Redis Cache Service (for caching predictions)
  # =============================================================================
  redis:
    image: redis:6-alpine
    container_name: gaming-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - gaming-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles: ["cache"]  # Only start with --profile cache

  # =============================================================================
  # API Service (for model serving)
  # =============================================================================
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: gaming-churn-prediction:latest
    container_name: gaming-api
    environment:
      - ENVIRONMENT=production
      - PYTHONPATH=/app
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    networks:
      - gaming-network
    restart: unless-stopped
    depends_on:
      - redis
    command: >
      sh -c "
        echo 'Starting API service...' &&
        python src/utils/deployment_utils.py
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    profiles: ["api"]  # Only start with --profile api

  # =============================================================================
  # Monitoring Service (simple log aggregation)
  # =============================================================================
  monitoring:
    image: alpine:latest
    container_name: gaming-monitoring
    volumes:
      - ./logs:/app/logs:ro
    networks:
      - gaming-network
    restart: unless-stopped
    command: >
      sh -c "
        echo 'Starting log monitoring...' &&
        while true; do
          echo '--- Log Summary $(date) ---' &&
          find /app/logs -name '*.log' -exec wc -l {} + 2>/dev/null | tail -1 &&
          sleep 60
        done
      "
    profiles: ["monitoring"]  # Only start with --profile monitoring

# =============================================================================
# Networks
# =============================================================================
networks:
  gaming-network:
    driver: bridge
    name: gaming-network

# =============================================================================
# Volumes
# =============================================================================
volumes:
  postgres_data:
    name: gaming_postgres_data
  redis_data:
    name: gaming_redis_data

# =============================================================================
# Docker Compose Profiles Usage Examples
# =============================================================================

# Default (analysis only):
#   docker-compose up --build

# Development environment:
#   docker-compose --profile development up

# Quick analysis:
#   docker-compose --profile quick up quick-analysis

# Full stack with database:
#   docker-compose --profile database --profile cache --profile api up

# Everything:
#   docker-compose --profile development --profile database --profile cache --profile api --profile monitoring up